/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/metawoldfinal.glb -o src/Components/metaworld.jsx -r public 
*/
import { extend, useFrame } from '@react-three/fiber';
import React, { useEffect, useMemo, useRef, useState } from 'react'
import { Clone, Float, Html, Mask, useGLTF } from '@react-three/drei'
import { RigidBody } from '@react-three/rapier'
import { Websites } from './Websites';
import * as THREE from "three";
import url from "./Horizon.mp4";
import { MathUtils } from 'three'

import { useConfigurator } from '../contexts/Configurator';
import { GLTFLoader } from 'three-stdlib';

// import { MathUtils } from 'three'






export function MetaWorld(props) {
  const swiper =useRef();
  const swiper1 =useRef();
  const [hidden, setHidden] = useState(true);
  const [caphidden, setCapHidden] = useState(false);
  const { nodes, materials } = useGLTF('/metawoldfinal.glb')
  const { loading, setLoading } = useConfigurator();
  const loader = new GLTFLoader();
  const group = useRef()


  const [video] = useState(() => {
    const vid = document.createElement("video");
    vid.src = url;
    vid.crossOrigin = "Anonymous";
    vid.loop = true;
    vid.muted = true;
    vid.play();
    return vid;
  });

  useEffect(()=>{
    if(!loading){
      loader.load(
        "/metawoldfinal.glb",
        ( gltf ) => {
          
            setLoading(true)
           
        },
        ( xhr ) => {
         
            // called while loading is progressing
            console.log( `${( xhr.loaded / xhr.total * 100 )}% loaded` );
        },
        ( error ) => {
     
            // called when loading has errors
            console.error( 'An error happened', error );
        },
        );
    }

  },[loading]);



  return (
    <group {...props}>
      <RigidBody type='kinematicVelocity' colliders={"hull"} restitution={3} position={[0,0,0]}  ref={swiper} >
      <group>
      <mesh geometry={nodes.Object_23.geometry} material={materials['tshirt.003']} position={[-2.483, 2.37, -4.051]} />
      </group>
      </RigidBody>

      <RigidBody type='kinematicVelocity' colliders={"hull"} restitution={3} position={[0,-2,0]}  ref={swiper1} >
      <mesh geometry={nodes.Object_50.geometry} material={materials.tanktop} position={[-3.366, 2.367, -4.047]} />
      </RigidBody>
      <group   position={[3.815, 1, -2.2]} scale={1.2} >
    <mesh rotation={[0, 4.712, 0]}>
        <planeGeometry args={[3.2, 1.9]} />
        
        <meshStandardMaterial  color='#71797E' emissiveIntensity={10}   side={THREE.FrontSide}>
          <videoTexture attach="map" args={[video]} />
          <videoTexture attach="emissiveMap" args={[video]} />
        </meshStandardMaterial>
      </mesh>
     
      </group>  
  
   
   
    <RigidBody type='fixed'  position={[0,-2,0]}  name='groundnew' colliders={"trimesh"} >
 <group {...props} dispose={null}>
  <group >
  {/* <clone geometry={nodes.Plane.geometry} material={nodes.Plane.material}  /> */}
  <Mask id={1}  colorWrite={false}  depthWrite={false} geometry={nodes.Plane.geometry}   position={[3.69, 3.496, 3.04]} >
      <Html style={{ userSelect: 'none' }}  rotation={[0, 4.712, 0]}  zIndexRange={[2.5, 0]} transform  scale={0.15}  >
    <iframe  style={{border:'none',borderRadius:"25px",}} width={600} height={1000} src='https://shrewdbs.com/' allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share">

      </iframe>
      {/* <iframe width="560" height="315" src="https://www.youtube.com/embed/tyv91T2sCGQ?si=q_rfZP7bwoRKwrsC" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe> */}
    </Html>
      </Mask>
  <mesh geometry={nodes.Plane.geometry} material={nodes.Plane.material}  >
  {/* <meshStandardMaterial transparent opacity={0.1} /> */}
      {/* <meshStandardMaterial  tr color='#71797E'   side={THREE.FrontSide}> */}
   
           
      {/* <Geometries/> */}
        {/* </meshStandardMaterial> */}
        
  </mesh>

  </group>

  <group>
    {/* <mesh>
    <CSS3DObject position={[0, 2, 0]}>
        <div >
          Hello, CSS3DObject!
        </div>
        </CSS3DObject>
    </mesh> */}
    {/* <MyScene/> */}
      
      </group>
    
      <group position={[-0.666, 2.041, 4.385]}>
        <mesh geometry={nodes.Object_31.geometry} material={materials.Teal} />
        <mesh geometry={nodes.Object_32.geometry} material={materials.Face_Outlines} />
        <mesh geometry={nodes.Object_33.geometry} material={materials.Face_Mat} />
        <mesh geometry={nodes.Object_34.geometry} material={materials.material_0} />
      </group>
      <group position={[3.29, 7.184, 5.46]}>
        <mesh geometry={nodes.Object_18.geometry} material={materials.Teal} />
        <mesh geometry={nodes.Object_19.geometry} material={materials.Face_Outlines} />
        <mesh geometry={nodes.Object_20.geometry} material={materials.Face_Mat} />
        <mesh geometry={nodes.Object_21.geometry} material={materials.material_0} />
      </group>
      <group position={[0, 1.827, 0]}>
        <group position={[-0.545, -0.138, -6.162]}>
          <mesh geometry={nodes.Object_14.geometry} material={materials.greyPlastic} />
          <mesh geometry={nodes.Object_15.geometry} material={materials.holes} />
          <mesh geometry={nodes.Object_16.geometry} material={materials.whiteMetal} />
        </group>
      </group>

      <RigidBody colliders="trimesh" type='fixed' onCollisionEnter={(other)=>{
        if(other.rigidBodyObject.name==="Player"){
          if (swiper.current){
            swiper1.current.setAngvel({ x: 0.0, y: 1.0, z: 0.0 },true)
            swiper.current.setAngvel({ x: 0.0, y: 1.0, z: 0.0 },true)
            // setHid
            // den(false)
            // swiper.current.setTranslation(0.0, 1.0, 1.0)
          }
        }
          
      }}
      onCollisionExit={(other)=>{
        if(other.rigidBodyObject.name==="Player"){
          if (swiper.current){
            swiper.current.setAngvel({ x: 0.0, y: 0.0, z: 0.0 },true)
            swiper1.current.setAngvel({ x: 0.0, y: 0.0, z: 0.0 },true)
            // setHidden(true)
            // swiper.current.setTranslation(0.0, 1.0, 1.0)
          }
        }
      }}
      
      >
      <group position={[-2.906, 1.746, -3.9]}>
        <mesh geometry={nodes.Object_56.geometry} material={materials.Materiale} />
        <mesh geometry={nodes.Object_57.geometry} material={materials['Materiale.004']} />
      </group>
      </RigidBody>
      <RigidBody colliders="trimesh" type='fixed' onCollisionEnter={(other)=>{
        if(other.rigidBodyObject.name==="Player"){
          if (swiper.current){
            setHidden(false)
            
          }
        }
          
      }}
      onCollisionExit={(other)=>{
        if(other.rigidBodyObject.name==="Player"){
          if (swiper.current){
            setHidden(true)
           
          }
        }
      }} >
      <group position={[-2.91, 1.746, -5.816]}>
        <mesh geometry={nodes.Object_59.geometry} material={materials.Materiale} />
        <mesh geometry={nodes.Object_60.geometry} material={materials['Materiale.004']} />
      </group>
      </RigidBody>


      <group position={[1.839, 1.746, -5.816]}>
        <mesh geometry={nodes.Object_62.geometry} material={materials.Materiale} />
        <mesh geometry={nodes.Object_63.geometry} material={materials['Materiale.004']} />
      </group>
      <group position={[16.228, 0, 0]}>
        <mesh geometry={nodes.Object_27.geometry} material={materials['Materiale.002']} position={[-16.207, 1.505, 0.079]} />
        <mesh geometry={nodes.Object_29.geometry} material={materials.aiStandard2SG} position={[1.999, 0, 0]} />
      </group>
      <mesh geometry={nodes.Object_44.geometry} material={materials.material_0} position={[-1.327, 2.54, 4.819]} />
      <mesh geometry={nodes.Object_67.geometry} material={materials['Materiale.003']} position={[-2.9, 1.599, -5.808]} />
      <mesh geometry={nodes.Object_69.geometry} material={materials['Materiale.003']} position={[1.836, 1.599, -5.808]} />
      <mesh geometry={nodes.Object_71.geometry} material={materials['Materiale.003']} position={[-0.672, 1.599, 4.86]} />
      <mesh geometry={nodes.Object_65.geometry} material={materials['Materiale.003']} position={[-2.9, 1.599, -3.896]} />
      <mesh geometry={nodes.Object_42.geometry} material={materials.Atlas1} position={[1.918, 2.477, 6.525]} />
      <group>
      <mesh geometry={nodes.Object_36.geometry} material={materials.material} position={[2.273, 2.496, -5.983]} />
      <Html 
      style={{ userSelect: 'none' }} 
       transform
        occlude
        onOcclude={setCapHidden}
        position={[2.273, 2.996, -5.983]}
        // position={labelOffset}
        scale={0.27}
        >
            
        <div className={`label1  ${caphidden ? "label--hidden" : ""}`}>
          <div className='avatar1'>
            <img src='/cap.png'></img>
            <div className='swecontent1'>
            <div className="label__name1">Cap</div>
            <div className="label__price1">Browse new arrival Flat Caps & Hats...</div>
            </div>
           
          </div>
       
        {/* </div> */}
        </div>
        </Html>
      </group>
      


        <group>
        <mesh geometry={nodes.Object_38.geometry} material={materials.hoodie} position={[-3.305, 2.479, -5.865]} />
        <Html 
        style={{ userSelect: 'none' }}
        
        
        position={[-3.205, 3.179, -6.165]} 
        // position={labelOffset}
        scale={0.32}
        >

        <div className={`label ${hidden ? "label--hidden" : ""}`}>
          <div className='avatar'>
            <img src='/dresscode.png'></img>
            <div className='swecontent'>
            <div className="label__name">Sweet Shirt</div>
            <div className="label__price">WHY IS A SWEATSHIRT CALLED A SWEATSHIRT? It's true that sweatshirts are great at keeping wearers warm, but as they were typically cotton practice jerseys back in the day.</div>
            </div>
           
          </div>
       
        {/* </div> */}
        </div>
        </Html>
        </group>

      
      <mesh geometry={nodes.Object_54.geometry} material={materials['Material.001']} position={[2.28, 2.31, -5.987]} />
      <mesh geometry={nodes.Object_46.geometry} material={materials.Jacket} position={[-0.723, 3.126, 4.932]} />
      <mesh geometry={nodes.Object_40.geometry} material={materials.longsleeve} position={[1.427, 2.204, -5.966]} />
      <mesh geometry={nodes.Object_7.geometry} material={materials.Materiale} />
      <mesh geometry={nodes.Object_11.geometry} material={materials.boothsheet_branding} />
      <mesh geometry={nodes.Object_52.geometry} material={materials.sneakers} position={[-2.303, 2.065, -5.932]} />
      <mesh geometry={nodes.Object_48.geometry} material={materials.Materiale} position={[-0.685, 3.372, 4.791]} />
     
      
    </group>
    </RigidBody>
    </group>
   
  )
}
// function Plane(props) {
//   const mesh = useRef()
//   // useFrame(() => (mesh.current.rotation.x = mesh.current.rotation.y += 0.01))
//   return (
//     <mesh {...props} ref={mesh}  scale={0.02}>
//       <planeGeometry attach="geometry" args={[100, 180]} />
//       <meshBasicMaterial attach="material" color={'white'}   side={THREE.DoubleSide} />
//     </mesh>
//   )
// }
// function Iframe(props) {
//   const cssObject = useRef(null)
  
  
//   useFrame(() => {
//     // console.log(props)
//     cssObject.current.position.copy(props.position)
//     cssObject.current.rotation.copy(props.rotation)
//   })
//   return (
//     // <Html >
//     <CSS3DObject ref={cssObject} {...props} >
//       <iframe src="https://shrewdbs.com/" />
//     </CSS3DObject>
//     // </Html>
   
//   )
// }

useGLTF.preload('/metawoldfinal.glb')
const material = new THREE.MeshStandardMaterial()
const geometries = [
  { geometry: new THREE.TetrahedronGeometry(2) },
  { geometry: new THREE.CylinderGeometry(0.8, 0.8, 2, 32) },
  { geometry: new THREE.ConeGeometry(1.1, 1.7, 32) },
  { geometry: new THREE.SphereGeometry(1.5, 32, 32) },
  { geometry: new THREE.IcosahedronGeometry(2) },
  { geometry: new THREE.TorusGeometry(1.1, 0.35, 16, 32) },
  { geometry: new THREE.OctahedronGeometry(2) },
  { geometry: new THREE.SphereGeometry(1.5, 32, 32) },
  { geometry: new THREE.BoxGeometry(2.5, 2.5, 2.5) }
]
function Geometries() {
  const n = 40
  const randProps = useMemo(() => Array.from({ length: n }, () => geometries[Math.floor(Math.random() * geometries.length)]), [])
  return randProps.map((prop) => {
    return (
      <Float>
        <mesh
          scale={MathUtils.randFloat(0.25, 0.5)}
          position={[MathUtils.randFloat(-8, 8), MathUtils.randFloat(-8, 8), THREE.MathUtils.randFloat(-8, 8)]}
          geometry={prop.geometry}
          material={material}
        />
      </Float>
    )
  })
}